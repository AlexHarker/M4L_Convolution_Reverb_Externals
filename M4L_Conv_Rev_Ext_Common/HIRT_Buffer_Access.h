
#ifndef __HIRT_BUFFER_ACCESS__
#define __HIRT_BUFFER_ACCESS__

#include <ext.h>
#include <ext_obex.h>

#include <ibuffer_access.h>


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////// Write Error Enum /////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


typedef enum {
    
    BUFFER_WRITE_ERR_NONE = 0,
    BUFFER_WRITE_ERR_NOT_FOUND = 1,
    BUFFER_WRITE_ERR_INVALID = 2,
    BUFFER_WRITE_ERR_TOO_SMALL = 3,
    BUFFER_WRITE_ERR_CHANNEL_INVALID = 4,
    
} t_buffer_write_error;


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////// Init Routine //////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


static __inline void buffer_access_init()
{
    ibuffer_init();
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////// Function Prototypes ///////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


double buffer_sample_rate(t_symbol *buffer);
AH_SIntPtr buffer_length(t_symbol *buffer);

long buffer_check(t_object *x, t_symbol *buffer, t_atom_long chan);

AH_SIntPtr buffer_read(t_symbol *buffer, long chan, float *out, AH_SIntPtr max_length);
AH_SIntPtr buffer_read_part(t_symbol *buffer, long chan, float *out, AH_SIntPtr offset, AH_SIntPtr read_length);

void buffer_write_error(t_object *x, t_symbol *buffer, t_buffer_write_error error);
t_buffer_write_error buffer_write(t_symbol *buffer, double *in, AH_SIntPtr write_length, long chan, long resize, double sample_rate, double mul);
t_buffer_write_error buffer_write_float(t_symbol *buffer, float *in, AH_SIntPtr write_length, long chan, long resize, double sample_rate, float mul);

short buffer_multiple_names(t_object *x, t_symbol **in_bufs, t_symbol **out_bufs, AH_SIntPtr *lengths, short argc, t_atom *argv, t_atom_long chan, long in_place, short max_bufs, AH_SIntPtr *overall_len_ret, AH_SIntPtr *max_len_ret, double *sr_ret);


#endif /* __HIRT_BUFFER_ACCESS__ */
